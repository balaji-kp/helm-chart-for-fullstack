# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.

---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # mysql Pod Should contain same labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:5.7 # image from docker-hub
          args:
            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: mysql
          env:
            - name: MYSQL_USER
              value: admin
            - name: MYSQL_PASSWORD
              value: password
            - name: MYSQL_ROOT_PASSWORD
              value: password
            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              value: fullstack
          ports:
            - containerPort: 3306
              name: mysql
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 100m
          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/minisql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-crud-deployment
spec:
  selector:
    matchLabels:
      app: springboot-k8s-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: springboot-k8s-mysql
    spec:
      containers:
        - name: springboot-crud-k8s
          image: 01112021/react-springboot-mysql-stack
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 100m
          env:   # Setting Enviornmental Variables
            - name: DB_URL   # Setting Database host address from configMap
              value: mysql
            - name: DB_USERNAME  # Setting Database name from configMap
              value: admin
            - name: DB_NAME  # Setting Database username from Secret
              value: fullstack
            - name: DB_PASSWORD # Setting Database password from Secret
              value: password
            - name: FRONTEND_ENDPOINT # Setting Database password from Secret
              value: http://13.235.31.106:8181

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-nginx-frontend
spec:
  selector:
    matchLabels:
      app: react-nginx-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: react-nginx-frontend
    spec:
      containers:
        - name: react-nginx-frontend
          image: 01112021/react-frontend:nginx-13.235.31.106-8080
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 100m

